/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package Jflex;
import static Jflex.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>NewLexer.flex</tt>
 */
class NewLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\14\1\14\1\14\1\14\22\0\1\0\4\0\1\13"+
    "\2\0\1\5\1\6\3\0\1\7\1\12\1\11\12\2\1\10\2\0"+
    "\1\35\1\0\1\33\1\15\32\3\4\36\1\4\1\36\1\32\1\26"+
    "\1\30\1\1\1\27\2\1\1\16\4\1\1\31\1\1\1\24\1\20"+
    "\2\1\1\21\1\17\1\25\1\34\1\22\1\1\1\23\1\1\12\0"+
    "\1\14\u1fa2\0\1\14\1\14\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\12\1\23\0\1\2\2\0\1\3\12\0\1\2"+
    "\2\0\1\3\5\0\1\4\6\0\1\3\21\0\1\3"+
    "\5\0\1\4\1\0\1\3\10\0\1\3\2\0\1\5"+
    "\4\0\1\3\2\0\1\5\1\6\1\0\1\4\1\0"+
    "\1\3\5\0\1\3\5\0\1\3\3\0\1\4\1\0"+
    "\1\3\5\0\1\3\4\0\1\6\1\3\2\0\1\4"+
    "\1\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\7\5\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\135\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\u01f0\0\u020f\0\u0117\0\u022e\0\u024d\0\u026c\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b"+
    "\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u024d\0\u0535\0\u0554"+
    "\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c"+
    "\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\76\0\u0706\0\u0725"+
    "\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d"+
    "\0\u083c\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915"+
    "\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d"+
    "\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05"+
    "\0\u0b24\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd"+
    "\0\u0c1c\0\u0c3b\0\u0c5a\0\76\0\u0972\0\u0c79\0\u0c98\0\u0cb7"+
    "\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33\0\u0d52\0\u0d71\0\u0d90\0\u0daf"+
    "\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7"+
    "\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23\0\u0f42\0\u0f61\0\u0f80\0\u0f9f"+
    "\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b\0\u103a\0\76\0\u1059\0\u1078"+
    "\0\u1097\0\u103a\0\u10b6\0\u10d5\0\u10f4\0\u1113\0\u1132\0\u1151"+
    "\0\u1170\0\u118f\0\u11ae\0\u11cd\0\u11ec\0\u120b\0\u122a\0\u1249"+
    "\0\u1268\0\u1287\0\u12a6\0\u12c5\0\u12a6\0\u12e4\0\u1303\0\u1322"+
    "\0\u1341\0\u1360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\6\3\1\0"+
    "\1\3\1\10\3\4\1\11\10\4\1\3\1\4\3\3"+
    "\1\12\1\5\1\6\1\3\1\7\6\3\1\0\1\3"+
    "\1\13\3\12\1\14\10\12\1\3\1\12\2\3\40\0"+
    "\1\15\6\0\1\16\5\0\15\15\1\0\1\15\4\0"+
    "\1\17\35\0\1\20\14\0\15\20\1\0\1\20\4\0"+
    "\1\21\35\0\1\15\6\0\1\16\5\0\1\15\1\22"+
    "\13\15\1\0\1\15\3\0\1\15\6\0\1\16\5\0"+
    "\4\15\1\23\10\15\1\0\1\15\3\0\1\24\1\25"+
    "\1\0\1\25\2\0\1\25\1\16\1\0\1\25\2\0"+
    "\1\26\15\24\1\0\1\24\3\0\1\24\1\25\1\0"+
    "\1\25\2\0\1\25\1\16\1\0\1\25\2\0\1\26"+
    "\1\24\1\27\13\24\1\0\1\24\3\0\1\24\1\25"+
    "\1\0\1\25\2\0\1\25\1\16\1\0\1\25\2\0"+
    "\1\26\4\24\1\30\10\24\1\0\1\24\13\0\1\31"+
    "\27\0\1\32\4\0\1\33\30\0\1\20\2\0\1\34"+
    "\11\0\15\20\1\0\1\20\4\0\1\35\35\0\1\15"+
    "\6\0\1\16\5\0\1\15\1\36\13\15\1\0\1\15"+
    "\3\0\1\15\6\0\1\16\5\0\4\15\1\37\10\15"+
    "\1\0\1\15\3\0\2\25\1\0\1\25\2\0\1\25"+
    "\2\0\1\25\2\0\1\26\15\25\1\0\1\25\3\0"+
    "\1\40\14\0\15\40\1\0\1\40\3\0\1\24\1\25"+
    "\1\0\1\25\2\0\1\25\1\16\1\0\1\25\2\0"+
    "\1\26\1\24\1\41\13\24\1\0\1\24\3\0\1\24"+
    "\1\25\1\0\1\25\2\0\1\25\1\16\1\0\1\25"+
    "\2\0\1\26\4\24\1\42\10\24\1\0\1\24\13\0"+
    "\1\43\27\0\1\44\3\0\1\45\1\46\31\0\1\47"+
    "\35\0\1\50\1\0\1\51\12\0\15\50\1\0\1\50"+
    "\4\0\1\52\3\0\1\53\31\0\1\15\6\0\1\16"+
    "\5\0\2\15\1\54\12\15\1\0\1\15\3\0\1\15"+
    "\6\0\1\16\1\0\1\55\3\0\15\15\1\0\1\15"+
    "\3\0\1\40\10\0\1\56\3\0\15\40\1\0\1\40"+
    "\3\0\1\24\1\25\1\0\1\25\2\0\1\25\1\16"+
    "\1\0\1\25\2\0\1\26\2\24\1\57\12\24\1\0"+
    "\1\24\3\0\1\24\1\25\1\0\1\25\2\0\1\25"+
    "\1\16\1\0\1\60\2\0\1\26\15\24\1\0\1\24"+
    "\3\0\2\43\1\0\1\43\2\0\1\43\1\0\1\61"+
    "\1\43\3\0\15\43\1\0\1\43\4\0\1\62\4\0"+
    "\1\63\36\0\1\46\31\0\1\64\36\0\1\65\35\0"+
    "\1\66\2\0\1\34\11\0\15\66\1\0\1\66\3\0"+
    "\1\67\14\0\15\67\1\0\1\67\10\0\1\45\1\46"+
    "\36\0\1\70\30\0\1\15\6\0\1\71\5\0\3\15"+
    "\1\72\11\15\1\0\1\15\25\0\1\73\14\0\1\24"+
    "\1\25\1\0\1\25\2\0\1\25\1\71\1\0\1\25"+
    "\2\0\1\26\3\24\1\74\11\24\1\0\1\24\3\0"+
    "\2\25\1\0\1\25\2\0\1\25\2\0\1\25\2\0"+
    "\1\26\5\25\1\75\7\25\1\0\1\25\3\0\4\61"+
    "\2\0\1\61\1\0\1\76\1\0\1\61\2\0\17\61"+
    "\1\0\1\61\2\0\1\77\36\0\1\62\36\0\1\100"+
    "\36\0\1\62\4\0\1\101\30\0\1\102\2\0\1\34"+
    "\11\0\15\102\1\0\1\102\3\0\1\67\2\0\1\103"+
    "\11\0\15\67\1\0\1\67\4\0\1\104\45\0\1\105"+
    "\26\0\1\15\6\0\1\71\5\0\15\15\1\0\1\15"+
    "\26\0\1\106\13\0\1\24\1\25\1\0\1\25\2\0"+
    "\1\25\1\71\1\0\1\25\2\0\1\26\15\24\1\0"+
    "\1\24\3\0\2\25\1\0\1\25\2\0\1\25\2\0"+
    "\1\25\2\0\1\26\6\25\1\107\6\25\1\0\1\25"+
    "\4\0\1\110\4\0\1\111\31\0\1\112\4\0\1\113"+
    "\31\0\1\114\40\0\1\34\33\0\1\115\1\0\1\116"+
    "\12\0\15\115\1\0\1\115\4\0\1\117\45\0\1\120"+
    "\52\0\1\121\12\0\2\25\1\0\1\25\2\0\1\25"+
    "\2\0\1\25\2\0\1\26\7\25\1\122\5\25\1\0"+
    "\1\25\4\0\1\123\36\0\1\110\36\0\1\44\36\0"+
    "\1\112\36\0\1\124\35\0\1\125\2\0\1\103\11\0"+
    "\15\125\1\0\1\125\3\0\1\126\14\0\15\126\1\0"+
    "\1\126\11\0\1\127\30\0\2\43\1\0\1\43\2\0"+
    "\1\43\1\0\1\61\1\43\3\0\4\43\1\130\10\43"+
    "\1\0\1\43\21\0\1\131\20\0\2\25\1\0\1\25"+
    "\2\0\1\25\2\0\1\25\2\0\1\26\1\25\1\132"+
    "\13\25\1\0\1\25\4\0\1\133\4\0\1\134\31\0"+
    "\1\110\4\0\1\135\30\0\1\136\2\0\1\103\11\0"+
    "\15\136\1\0\1\136\3\0\1\126\2\0\1\137\11\0"+
    "\15\126\1\0\1\126\4\0\1\140\35\0\2\43\1\0"+
    "\1\43\2\0\1\43\1\0\1\61\1\43\3\0\4\43"+
    "\1\141\10\43\1\0\1\43\27\0\1\142\12\0\2\25"+
    "\1\0\1\25\2\0\1\25\2\0\1\25\2\0\1\26"+
    "\7\25\1\143\5\25\1\0\1\25\4\0\1\144\36\0"+
    "\1\133\36\0\1\145\40\0\1\103\33\0\1\146\1\0"+
    "\1\147\12\0\15\146\1\0\1\146\4\0\1\150\35\0"+
    "\2\43\1\0\1\43\2\0\1\43\1\0\1\61\1\43"+
    "\3\0\4\43\1\151\10\43\1\0\1\43\30\0\1\152"+
    "\11\0\2\25\1\0\1\25\2\0\1\25\2\0\1\25"+
    "\2\0\1\26\10\25\1\153\4\25\1\0\1\25\11\0"+
    "\1\154\31\0\1\155\35\0\1\156\2\0\1\137\11\0"+
    "\15\156\1\0\1\156\3\0\1\157\14\0\15\157\1\0"+
    "\1\157\11\0\1\160\30\0\2\43\1\0\1\43\2\0"+
    "\1\43\1\0\1\61\1\161\3\0\15\43\1\0\1\43"+
    "\31\0\1\162\10\0\2\25\1\0\1\25\2\0\1\25"+
    "\2\0\1\25\2\0\1\26\11\25\1\163\3\25\1\0"+
    "\1\25\3\0\1\164\2\0\1\137\11\0\15\164\1\0"+
    "\1\164\3\0\1\157\2\0\1\165\11\0\15\157\1\0"+
    "\1\157\4\0\1\166\35\0\2\43\1\0\1\43\2\0"+
    "\1\43\1\0\1\61\1\43\3\0\5\43\1\167\7\43"+
    "\1\0\1\43\14\0\1\170\25\0\2\25\1\0\1\25"+
    "\2\0\1\25\2\0\1\171\2\0\1\26\15\25\1\0"+
    "\1\25\6\0\1\137\33\0\1\172\1\0\1\173\12\0"+
    "\15\172\1\0\1\172\4\0\1\174\35\0\2\43\1\0"+
    "\1\43\2\0\1\43\1\0\1\61\1\43\3\0\6\43"+
    "\1\175\6\43\1\0\1\43\32\0\1\176\7\0\2\25"+
    "\1\0\1\25\2\0\1\25\2\0\1\25\2\0\1\26"+
    "\12\25\1\177\2\25\1\0\1\25\3\0\1\200\2\0"+
    "\1\165\11\0\15\200\1\0\1\200\3\0\1\201\14\0"+
    "\15\201\1\0\1\201\11\0\1\202\30\0\2\43\1\0"+
    "\1\43\2\0\1\43\1\0\1\61\1\43\3\0\7\43"+
    "\1\203\5\43\1\0\1\43\26\0\1\204\13\0\2\25"+
    "\1\0\1\25\2\0\1\25\2\0\1\25\2\0\1\26"+
    "\6\25\1\205\6\25\1\0\1\25\3\0\1\206\2\0"+
    "\1\165\11\0\15\206\1\0\1\206\3\0\1\201\2\0"+
    "\1\207\11\0\15\201\1\0\1\201\4\0\1\210\35\0"+
    "\2\43\1\0\1\43\2\0\1\43\1\0\1\61\1\43"+
    "\3\0\1\43\1\211\13\43\1\0\1\43\33\0\1\212"+
    "\6\0\2\25\1\0\1\25\2\0\1\25\2\0\1\25"+
    "\2\0\1\26\13\25\1\213\1\25\1\0\1\25\6\0"+
    "\1\165\33\0\1\214\1\0\1\215\12\0\15\214\1\0"+
    "\1\214\4\0\1\216\35\0\2\43\1\0\1\43\2\0"+
    "\1\43\1\0\1\61\1\43\3\0\7\43\1\217\5\43"+
    "\1\0\1\43\13\0\1\220\26\0\2\25\1\0\1\25"+
    "\2\0\1\25\1\0\1\220\1\25\2\0\1\26\15\25"+
    "\1\0\1\25\3\0\1\221\2\0\1\207\11\0\15\221"+
    "\1\0\1\221\3\0\1\222\14\0\15\222\1\0\1\222"+
    "\3\0\2\43\1\0\1\43\2\0\1\43\1\0\1\61"+
    "\1\43\3\0\10\43\1\223\4\43\1\0\1\43\24\0"+
    "\1\224\15\0\1\225\2\0\1\207\11\0\15\225\1\0"+
    "\1\225\3\0\2\43\1\0\1\43\2\0\1\43\1\0"+
    "\1\61\1\43\3\0\11\43\1\226\3\43\1\0\1\43"+
    "\34\0\1\227\10\0\1\207\33\0\2\43\1\0\1\43"+
    "\2\0\1\43\1\0\1\61\1\230\3\0\15\43\1\0"+
    "\1\43\21\0\1\231\20\0\2\43\1\0\1\43\2\0"+
    "\1\43\1\0\1\61\1\43\3\0\12\43\1\232\2\43"+
    "\1\0\1\43\32\0\1\233\7\0\2\43\1\0\1\43"+
    "\2\0\1\43\1\0\1\61\1\43\3\0\6\43\1\234"+
    "\6\43\1\0\1\43\20\0\1\235\21\0\2\43\1\0"+
    "\1\43\2\0\1\43\1\0\1\61\1\43\3\0\13\43"+
    "\1\236\1\43\1\0\1\43\35\0\1\237\4\0\2\43"+
    "\1\0\1\43\2\0\1\43\1\0\1\240\1\43\3\0"+
    "\15\43\1\0\1\43\36\0\1\241\3\0\4\61\2\0"+
    "\1\61\1\0\1\76\1\0\1\61\2\0\4\61\1\242"+
    "\12\61\1\0\1\61\35\0\1\243\2\0\4\61\2\0"+
    "\1\61\1\0\1\76\1\0\1\61\2\0\14\61\1\244"+
    "\2\61\1\0\1\61\1\0\4\245\11\0\15\245\1\0"+
    "\1\245\1\0\1\245\1\0\4\61\2\0\1\61\1\0"+
    "\1\76\1\0\1\61\2\0\1\61\1\246\15\61\1\0"+
    "\1\61\1\0\4\61\2\0\1\61\1\0\1\76\1\0"+
    "\1\61\2\0\12\61\1\247\4\61\1\0\1\61\1\0"+
    "\4\61\2\0\1\61\1\0\1\76\1\0\1\61\2\0"+
    "\1\250\16\61\1\0\1\61\1\0\4\61\2\0\1\61"+
    "\1\0\1\76\1\0\1\61\2\0\15\61\1\251\1\61"+
    "\1\0\1\61\1\0\4\61\2\0\1\61\1\0\1\76"+
    "\1\0\1\61\2\0\16\61\1\252\1\0\1\61\1\0"+
    "\4\61\2\0\1\61\1\0\1\76\1\0\1\61\2\0"+
    "\17\61\1\243\1\61";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4991];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\11\1\23\0\1\1\2\0\1\1\12\0"+
    "\1\1\2\0\1\1\5\0\1\1\6\0\1\11\21\0"+
    "\1\1\5\0\1\1\1\0\1\1\10\0\1\1\2\0"+
    "\1\1\4\0\1\1\2\0\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\5\0\1\1\5\0\1\1\3\0\1\1"+
    "\1\0\1\1\5\0\1\1\4\0\1\11\1\1\2\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NewLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  NewLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 110) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return ERROR;
          }
        case 8: break;
        case 2: 
          { lexeme=yytext(); return EMAIL;
          }
        case 9: break;
        case 3: 
          { lexeme=yytext(); return URL;
          }
        case 10: break;
        case 4: 
          { lexeme=yytext(); return NOMBRE;
          }
        case 11: break;
        case 5: 
          { lexeme=yytext(); return CELULAR;
          }
        case 12: break;
        case 6: 
          { lexeme=yytext(); return LOCAL;
          }
        case 13: break;
        case 7: 
          { lexeme=yytext(); return VIDEO;
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
